npm install -g create-react-app // initaializing packages
create-react-app client-panel-app //generate application
create-react-app . //also generate app
npm start ****
Start from -> App.js -> render() invoke creating UI
        - header.js   <Header branding="Contact Manager"/> //functional component
        - Contacts.js <Contacts/>

Create components
    class Contacts extends Component
    const {name, email, phone} = this.props; //we can access properties through props
    <Contact
        name="Line Manager"
        email="react1@gmail.com"
        phone="123-456-7892"/>

import App.js -> main file

https://getbootstrap.com/docs/4.2/getting-started/introduction/
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
// put this in main index.html
if Bootstrap not exist: npm install bootstrap
    then : import 'bootstrap/dist/css/bootstrap.min.css';
    ex:

Style sheet :  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    ex: <i className="fas fa-sort-down"></i>

    Events in React:
    <i onClick={() => console.log('Hello')} className="fas fa-sort-down"></i>
    use : ternary operator ? setEvents() : null

<React.Fragment> removes unwanted parts
        this.state ={
            showContactInfo: false
        } // already define then use this.setState({showContactInfo: false})

*************************************************************************
ContextApi :
Reducer:
fixed delete ..................

Header.defaultProps ={
    branding : 'MyApp'    // set the value as default , override while pass the value
};

react-route-dom : package provide ..router route switch : also map Link

ComponentDidMount : using Ajax calls
ComponentWillMount : this executing before ComponentDidMount
ComponentDidUpdate: it re renders after component change
ComponentWillUpdate:
ComponentWillReceiveProps : componentWillReceiveProps(nextProps, nextState)

https://medium.com/@baphemot/understanding-react-react-16-3-component-life-cycle-23129bc7a705


*****************************************************************************************

Redux: it replace instead of context api..
based on the requirements redux takes place on complex applications

    -> provider
    -> reducer

    connect - {connect} from "react-redux"; connect the contact Reducer and
    mapDispatchToProps ,mapStateToProps..








